@page "/members/report"
@inject Need4Service Need4Service 
<h3>Report a member</h3>



<EditForm Model="MemberReport">
    <div class="row mb-3">
        <input @bind="@MemberReport.ReportedMember.User.Name" @bind:event="oninput" @onkeyup="SearchBoxKeyPress" />
    </div>

    <div class="row mb-3">
        <InputTextArea @bind-Value="MemberReport.Reason" />
    </div>
            
    <div class="row mb-3">
        <button class="btn" type="button" @onclick="SearchClick">Search</button>
        <button class="btn" type="button" @onclick="ClearClick">Clear</button>
    </div>
</EditForm>

<div>
    <ul>
    @foreach(var memberMatch in Matches)
    {
        <li>
            <button @onclick="() => ReportMember(memberMatch)">@memberMatch.User.Name</button>
        </li>
    }
    </ul>
</div>

@code {

    private CommunityService.CommunityServiceClient communityClient;
    public List<Member> Matches { get; set; } = new List<Member>();
    public List<Member> MemberList { get; set; } = new List<Member>();
    public MemberReport MemberReport { get; set; } = new MemberReport { ReportedMember = new Member { User = new User() } };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        communityClient = Need4Service.GetCommunityClient();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        MemberList.Add(new Member {User = new User { Name = "Joe"}});
        MemberList.Add(new Member {User = new User { Name = "Jim"}});
        MemberList.Add(new Member {User = new User { Name = "John"}});
        MemberList.Add(new Member {User = new User { Name = "Adam"}});
        MemberList.Add(new Member {User = new User { Name = "James"}});
        MemberList.Add(new Member {User = new User { Name = "Phil"}});
    }


    public void ReportMember(Member memberToReport)
    {
        MemberReport memberReport = this.MemberReport;
        memberReport.ReportedMember = memberToReport;
        memberReport.ReportingMember = new Member { User = Utility.GetUser() };
        communityClient.DoReportMember(memberReport);
    }

    protected void SearchClick()
    {
        if (string.IsNullOrEmpty(MemberReport.ReportedMember.User.Name))
        {
            //LoadBooks(int.Parse(Page));
            return;
        }

        //Search(SearchTerm, int.Parse(Page));
    }

    private void Search(string term, int page)
    {
        Action<string> action = async (token) =>
        {
            //BooksClient.Token = token;
            //Books = await BooksClient.SearchBooks(term, page);

            StateHasChanged();
        };

        //RegisteredFunction.InvokeUnmarshalled<bool>("executeWithToken", action);
    }

    protected void SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            SearchClick();
        }
        else
        {
            string name = MemberReport.ReportedMember.User.Name;
            var q = from x in MemberList
                    where x.User.Name.ToUpper().StartsWith(MemberReport.ReportedMember.User.Name.ToUpper())
                    select x;


            Matches.Clear();

            if(name != String.Empty)
                Matches.AddRange(q.ToList());
        }

        StateHasChanged();
    }

    protected void ClearClick()
    {
        MemberReport.ReportedMember.User.Name = "";
        MemberReport.Reason = "";
        Matches.Clear();
        StateHasChanged();
        //LoadBooks(1);
    }
}
