@page "/TradeViewDetails/{tradeId:int}"
@inject XYZ.Utility Utility


<h3>TradeViewDetails</h3>
<TradeViewSmall trade="@trade"></TradeViewSmall>
<div class="container">
    <div class="col-md-6">
        @foreach (ActionDetails a in actions)
        {
            <button type="button" class="btn btn-primary"
                    @onclick="@(_ => NavigationManager.NavigateTo(Utility.ActionRoute(a.Method, actionKeyValuePairs)))">@a.Name</button>
        }
    </div>
</div>


@code {
    [Parameter]
    public int tradeId { get; set; }
    private User user { get; set; }
    private Dictionary<string,string> actionKeyValuePairs { get; set; }

    bool show = true;
    string style_display { get { return show ? "display:show" : "display:none"; } }

    List<ActionDetails> actions;
    TradeService.TradeServiceClient tradeClient;
    Trade trade;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        tradeClient = Need4Service.GetTradeClient();
        await base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        // THIS DOES NOT GET CALLED WHEN A PARAMETER CHANGES!!!
        // Note: when using NavigationManager, and changing the param, this gets SKIPPED!
    }

    protected override void OnParametersSet()
    {
        user = Utility.GetUser();

        TradeUserRequest tradeUserRequest = user != null ?
            new TradeUserRequest { AuthenticatedUserId = user.Id, TradeId = tradeId } :
            new TradeUserRequest { UnauthenticatedUser = new Empty(), TradeId = tradeId };

        trade = tradeClient.GetDetailedTradeView(tradeUserRequest);

        tradeClient.CheckPermissions(tradeUserRequest);

        TradeActionResponse actionResponse = tradeClient.GetTradeActions(tradeUserRequest);

        actions = actionResponse.Actions.ToList();

        actionKeyValuePairs = new Dictionary<string, string> { { "tradeId", tradeId.ToString()}, { "userId", user.Id.ToString() } };


    }

}

