@page "/"
@inject XYZ.Utility Utility

@*<AuthorizeView Policy=@Helpers.Policies.HAS_TRADES_TYPE>*@
<AuthorizeView>
    <Authorized>
        <h1 class="collapse-toggle" data-toggle="collapse" data-target="#my-trades" aria-expanded="true">My Trades</h1>
        <div id="my-trades" class="collapse show">
            @if (myTrades.Count == 0)
            {
                <p class="lead">Looks like your docket is clear. Take a look at upcoming trades!</p>
            }
            else
            {
                <p class="lead">Monitor your in-progress trades</p>
                @foreach (Trade t in myTrades)
                {
                    <TradeViewSmall trade="t"></TradeViewSmall>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

<h1 class="collapse-toggle" data-toggle="collapse" data-target="#upcoming-trades" aria-expanded="true">Upcoming Trades</h1>
<div id="upcoming-trades" class="collapse show">
    <p class="lead">Browse open trades and participate!</p>
    @foreach (Trade t in openTrades)
    {
        <TradeViewSmall trade="t"></TradeViewSmall>
    }
</div>

<h1 class="collapse-toggle" data-toggle="collapse" data-target="#sales" aria-expanded="true">Ongoing Sales</h1>
<div id="sales" class="collapse show">
    <p class="lead">What are you buying? What are you selling?</p>
    @foreach (Sale s in ongoingSales)
    {
        <SaleViewSmall sale="s"></SaleViewSmall>
    }

</div>

@code {
    TradeService.TradeServiceClient TradeClient;
    SaleService.SaleServiceClient SaleClient;

    List<Trade> myTrades;
    List<Trade> openTrades;
    List<Sale> ongoingSales;

    protected override void OnInitialized()
    {
        TradeClient = Need4Service.GetTradeClient();
        SaleClient = Need4Service.GetSaleClient();
    }

    protected override void OnParametersSet()
    {

        Need4Protocol.User user = Utility.GetUser();

        if (user != null)
        {
            myTrades = TradeClient.GetUserTrades(user).Trades.ToList();
        }

        openTrades = TradeClient.GetOpenTrades(new Empty()).Trades.ToList();
        ongoingSales = SaleClient.GetSales(new Empty()).Sales.ToList();
    }

}
