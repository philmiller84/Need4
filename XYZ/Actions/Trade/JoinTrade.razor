@page "/trade/join/{tradeId:int}/{userId:int}"

@using Helpers
@inject IAuthorizationService AuthorizationService
@inject IHttpContextAccessor HttpContextAccessor

@*@attribute [Authorize(Policy = @Helpers.Policies.JOIN_TRADE_TYPE)]*@
@*@attribute [TradeRequirement(@Helpers.Policies.JOIN_TRADE_TYPE)]*@

@*<AuthorizeView Policy="Email">
    <p>You can only see this if you satisfy the "Email" policy.</p>
</AuthorizeView>*@


<h3>JoinTrade</h3>

@if(authorization.Result.Succeeded)
{
    <p>Have permission</p>
        <p> called with variables:</p>
        <p> tradeId: @tradeId </p>
        <p> userId: @userId </p>
}
else
{
    <p>DONT Have permission</p>
}

@code {
    [Parameter]
    public int tradeId { get; set; }
    [Parameter]
    public int userId { get; set; }

    private Task<AuthorizationResult> authorization;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private Need4Protocol.User user { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        var tradeClient = Need4Service.GetTradeClient();
        user = Utility.GetUser();
        TradeUserRequest tradeUserRequest = user != null ?
            new TradeUserRequest { AuthenticatedUserId = user.Id, TradeId = tradeId } :
            new TradeUserRequest { UnauthenticatedUser = new Empty(), TradeId = tradeId };

        var permissions = tradeClient.CheckPermissions(tradeUserRequest);

        var requirements = new List<IAuthorizationRequirement> { new Helpers.JoinTradeRequirement() };
        authorization = AuthorizationService.AuthorizeAsync(HttpContextAccessor.HttpContext.User, new Trade{Id = tradeId }, requirements);
    }
}
